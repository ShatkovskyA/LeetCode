package com.vashajava.dynamicprogramming;

import java.util.Arrays;

/**
 * Класс _62_Unique_Paths_ - уникальные пути.
 *
 * @author Anton Shatkovskiy
 * @created 27.11.2024 г.
 */

/*
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]).
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]).
The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

Constraints:
1 <= m, n <= 100

ПЕРЕВОД: 62. Уникальные пути. - лассический пример комбинаторной задачи, которая может быть решена с помощью динамического программирования (DP)
На сетке mxn есть робот. Изначально робот находится в верхнем левом углу (т.е. в сетке[0][0]).
Робот пытается переместиться в правый нижний угол (т.е. в сетку[m - 1][n - 1]).
В любой момент времени робот может перемещаться только вниз или вправо.

Учитывая два целых числа m и n, верните количество возможных уникальных путей, по которым робот может пройти, чтобы достичь нижнего правого угла.

Тестовые задания генерируются таким образом, чтобы ответ был меньше или равен 2 * 109.

Пример 1:
Входные данные: m = 3, n = 7
Выходные данные: 28

Пример 2:
Входные данные: m = 3, n = 2
Выходные данные: 3
Пояснение: Из левого верхнего угла есть в общей сложности 3 способа добраться до правого нижнего угла:
1. Вправо -> Вниз -> Вниз
2. Вниз -> Вниз -> Вправо
3. Вниз -> Вправо -> Вниз

Ограничения:
1 <= m, n <= 100
 */
public class _62_Unique_Paths_ {

  public static void main(String[] args) {

    // это есть размеры сетки
    int m = 3; // строки
    int n = 7; // столбцы

    Solution62 solution62 = new Solution62();
    int uniquePaths = solution62.uniquePaths(m, n);
    System.out.println(uniquePaths);
  }

  static class Solution62 {
    public int uniquePaths(int m, int n) {
      // создаем массив для хранения количества уникальных путей к каждой ячейке в нижней строке
      int[] pathCounts = new int[n];

      // инициализируем нижнюю строку с помощью 1s, поскольку есть только один способ добраться до каждой ячейки в нижней строке
      // при перемещении только вправо, где Arrays.fill(имя, значение)- "заводской", библиотечный метод заполняет переданный массив переданным значением
      Arrays.fill(pathCounts, 1);

      // т. е. первый - нижний ряд заполнен 1-ми,
      // то выполняем цикл по каждой ячейке, начиная со второго ряда и заканчивая верхним рядом (так как нижний ряд уже заполнен)
      for(int row = 1; row < m; ++row ) {
        // для каждой ячейки в строке начинайте со второго столбца, поскольку первый столбец любой строки
        // будет иметь только один уникальный путь (т.е. движение вниз от ячейки выше)
        for(int col = 1; col < n; ++col) {
          // количество уникальных путей к текущей ячейке равно сумме уникальных путей к ячейке
          // непосредственно над ней и к ячейке слева от нее
          pathCounts[col] += pathCounts[col - 1];
        }
      }
      // и возвращаем количество уникальных путей в правый верхний угол сетки
      return pathCounts[n - 1];
    }
  }
}
/*
Временная сложность предоставленного решения составляет O(m * n), где m - количество строк и n - количество столбцов.
Это связано с тем, что существуют два вложенных цикла: внешний цикл выполняется m - 1 раз (поскольку все значения первой строки инициализируются равными 1),
а внутренний цикл выполняется n - 1 раз для каждой итерации внешнего цикла,
в результате чего получается в общей сложности (m - 1) * (n - 1) итераций тела внутреннего цикла.
Однако, поскольку интересует только обозначение big O, это упрощается до O(m * n).
 */
