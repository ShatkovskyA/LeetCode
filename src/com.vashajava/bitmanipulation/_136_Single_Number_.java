package com.vashajava.bitmanipulation;

/**
 * Класс _136_Single_Number_ одиночный номер.
 *
 * @author Anton Shatkovskiy
 * @created 15.07.2024 г.
 */

/*
Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

ПЕРЕВОД: 136. Одиночный номер.
В непустом массиве целых чисел nums каждый элемент отображается дважды, за исключением одного. Найдите этот единственный элемент.

Необходимо реализовать решение с линейной сложностью во время выполнения и использовать только постоянный дополнительный пробел.

Пример 1:

Ввод: nums = [2,2,1]
Вывод: 1
Пример 2:

Ввод: nums = [4,1,2,1,2]
Вывод: 4
Пример 3:

Ввод: nums = [1]
Вывод: 1

Ограничения:

1 <= цифры.длина <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Каждый элемент в массиве появляется дважды, за исключением одного элемента, который появляется только один раз.

 */
public class _136_Single_Number_ {

  public static void main(String[] args) {

    int[] nums = {2, 2, 1};

    Solution136 solution136 = new Solution136();
    int singleNumber = solution136.singleNumber(nums);
    System.out.println(singleNumber);

  }

  static class Solution136 {
    // Функция для поиска единственного числа в массиве, где каждый элемент появляется дважды, за исключением одного
    public int singleNumber(int[] nums) {
      // водим и инициализируем переменную 'answer' значением 0, она необходима как переменная представляющая ответ
      int answer = 0;

      // далее пробегаемся облегченным циклом по каждому значению в массиве 'nums'
      for (int value : nums) {
        /*
        Логическая операция XOR (исключающее или) принимает два логических операнда и возвращает true тогда и только тогда,
        когда операнды разные. И наоборот, она возвращает false, если два операнда имеют одинаковое значение.
        В Java оператор XOR представлен символом ^.
        Это побитовый оператор, который сравнивает совпадающие биты двух значений, чтобы вернуть результат.
        Если два бита одинаковой позиции имеют одинаковое значение, результирующий бит будет равен 0. В противном случае это будет 1.
         */
        // применяем операцию XOR (т. е. применяется аналог XOR - ^) между "ответом" и "значением"
        // т. к. XOR для числа с самим по себе равно 0, а с 0 - это само число,
        // это приведет к удалению всех пар, оставив только одно число
        answer ^= value;
      }

      // и далее возвращаем единственное число, у которого нет пары
      return answer;
    }
  }
}

/*
Временная сложность кода равна O(n), где n – длина массива nums.
Это связано с тем, что reduce-функция применяет xor-операцию последовательно к элементам списка, что требует одного прохода по всем элементам.
 */
